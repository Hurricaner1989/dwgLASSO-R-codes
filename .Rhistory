rm(list = ls())
getwd()
source("IntraData_M_GU.R") # metabolomic GU cohort
Met_name_GU
View(Met_CIRR_GU)
var(Met_CIRR_GU)
var(t(Met_CIRR_GU))
View(Met_Group_GU)
source("IntraData_M_TU.R") # metabolomic TU cohort
?scale
data_CIRR <- scale(t(Met_CIRR_GU)) # n1*p CIRR
data_HCC <- scale(t(Met_HCC_GU)) # n2*p HCC
cov_CIRR <- var(data_0)
cov_CIRR <- var(data_CIRR)
cov_HCC <- var(data_CIRR)
rm(Met_CIRR_GU, Met_CIRR_TU)
?det
set.seed(100)
n_fold <- 5 # number of folds
rho = exp(seq(log(0.4), log(0.01), length.out = 20))
## Draw error curve
choose_rho <- function(data, n_fold, rho) {
# randomly shuffle the data
Data <- data[sample(nrow(data)),]
# create n_fold equally size folds
folds <- cut(seq(1, nrow(Data)), breaks = n_fold, labels = FALSE)
# tune parameters
d <- ncol(Data)
loglik_cv <- c()
loglik_rho <- c()
pb <- txtProgressBar(min = 0, max = length(rho), style = 3) # create progress bar
for(i in 1:length(rho)){
Sys.sleep(0.1)
# perform n_fold cross validation
loglik <- c()
for(j in 1:n_fold){
# segement your data by fold using the which() function
testIndexes <- which(folds == j, arr.ind=TRUE)
testData <- Data[testIndexes, ]
trainData <- Data[-testIndexes, ]
# use test and train data partitions however you desire...
cov <- var(trainData) # compute the covariance matrix
pre<- glasso(cov, rho = rho[i])
loglik <- c(loglik, loglik_ave(testData, pre$wi))
}
loglik_cv <- c(loglik_cv, sum(loglik) / n_fold)
loglik_rho <- c(loglik_rho, sd(loglik) / sqrt(n_fold))
setTxtProgressBar(pb, i) # update progress bar
}
close(pb)
plot(rho, loglik_cv, main = "Error curve using corss validation",
xlab = expression(lambda), ylab = "Error")
lines(rho, loglik_cv)
error <- list("log.cv" = loglik_cv, "log.rho" = loglik_rho)
return(error)
}
error <- choose_rho(data_low, n_fold, rho)
error <- choose_rho(data_CIRR, n_fold, rho)
library("glasso") # need install
error <- choose_rho(data_CIRR, n_fold, rho)
loglik_ave <- function(data, theta){
loglik <- c()
loglik <- log(det(theta))-sum(diag(var(data)%*%theta))
-loglik
}
error <- choose_rho(data_CIRR, n_fold, rho)
rho[error$log.cv == min(error$log.cv)]
abline(v = rho[loglik_cv == min(loglik_cv)], col = "red", lty = 3)
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
set.seed(100)
n_fold <- 5 # number of folds
rho = exp(seq(log(0.6), log(0.01), length.out = 20))
error <- choose_rho(data_CIRR, n_fold, rho)
rho[error$log.cv == min(error$log.cv)] # rho based on minimum rule
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
abline(v = 0.184, col = "red", lty=3) # 0.184 for GU and TU
rho_opt <- 0.253
pre_CIRR <- glasso(cov_CIRR, rho = rho_opt)
rm(n_fold, rho, rho_opt, error)
thres <- 1e-3
sum(abs(pre_CIRR$wi) > thres)
pre_CIRR$wi[1:10,1:10]
p <- nrow(data_CIRR)
p <- nrow(Met_HCC_GU)
p <- nrow(Met_HCC_GU)
pc_CIRR <- matrix(0, p, p)
for(i in 1:(p - 1)){
for(j in (i + 1):p){
pc_CIRR[i, j] = -pre_0$wi[i, j] / sqrt(pre_0$wi[i, i] * pre_0$wi[j, j])
pc_CIRR[j, i] = pc_CIRR[i, j]
}
}
for(i in 1:(p - 1)){
for(j in (i + 1):p){
pc_CIRR[i, j] = -pre_CIRR$wi[i, j] / sqrt(pre_CIRR$wi[i, i] * pre_CIRR$wi[j, j])
pc_CIRR[j, i] = pc_CIRR[i, j]
}
}
sum(abs(pc_CIRR) > thres)
pc_0[1:10,1:10]
pc_CIRR[1:10,1:10]
rm(i, j, thres)
thres <- 1e-3
edge_CIRR <- matrix(0, sum(abs(pc_CIRR) > thres) / 2, 3)
k <- 1
for(i in 1:(nrow(pc_CIRR) - 1)){
for (j in (i + 1):nrow(pc_CIRR)){
if(abs(pc_CIRR[i, j]) > thres){
edge_CIRR[k, 1] <- i
edge_CIRR[k, 2] <- j
edge_CIRR[k, 3] <- pc_CIRR[i, j]
k <- k + 1
}
}
}
edge_dn_CIRR <- data.frame("Met1" = edge_CIRR[, 1], "Met2" = edge_CIRR[, 2], "Weight" = edge_CIRR[, 3])
write.csv(edge_dn_CIRR, file = "Met_dn_CIRR.csv", quote = F, row.names = F)
View(edge_CIRR)
sum(abs(pc_CIRR) > thres) / 2
rm(edge_CIRR, edge_dn_CIRR, i, j, k)
rm(edge_CIRR, edge_dn_CIRR, i, j, k, thres)
n_fold <- 5 # number of folds
rho = exp(seq(log(0.6), log(0.01), length.out = 20))
error <- choose_rho(data_HCC, n_fold, rho)
rho[error$log.cv == min(error$log.cv)] # rho based on minimum rule
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
rho_opt <- 0.253
pre_HCC <- glasso(cov_HCC, rho = rho_opt)
rm(n_fold, rho, rho_opt, error)
thres <- 1e-3
sum(abs(pre_HCC$wi) > thres)
pre_HCC$wi[1:10,1:10]
sum(abs(pre_HCC$wi) > thres)
pc_HCC <- matrix(0, p, p)
for(i in 1:(p - 1)){
for(j in (i + 1):p){
pc_HCC[i, j] = -pre_HCC$wi[i, j] / sqrt(pre_HCC$wi[i, i] * pre_HCC$wi[j, j])
pc_HCC[j, i] = pc_HCC[i, j]
}
}
sum(abs(pc_HCC) > thres)
pc_HCC[1:10,1:10]
rm(i, j)
edge_HCC <- matrix(0, sum(abs(pc_HCC) > thres) / 2, 3)
k <- 1
for(i in 1:(nrow(pc_HCC) - 1)){
for (j in (i + 1):nrow(pc_HCC)){
if(abs(pc_HCC[i, j]) > thres){
edge_HCC[k, 1] <- i
edge_HCC[k, 2] <- j
edge_HCC[k, 3] <- pc_HCC[i, j]
k <- k + 1
}
}
}
edge_dn_HCC <- data.frame("Met1" = edge_HCC[, 1], "Met2" = edge_HCC[, 2], "Weight" = edge_HCC[, 3])
write.csv(edge_dn_HCC, file = "Met_dn_HCC.csv", quote = F, row.names = F)
rm(edge_HCC, edge_dn_HCC, i, j, k, thres)
diff <- pc_CIRR - pc_HCC
thres = 1e-3
sum(abs(diff) > thres)
pc_HCC[1:10,1:10]
pc_CIRR[1:10,1:10]
rm(list = ls())
getwd()
setwd("C:\\Users\\yz335\Documents\\Github\\dwgLASSO-R-package")
setwd("C:\\Users\\yz335\\Documents\\Github\\dwgLASSO-R-package")
ls
rm(list = ls())
getwd()
load("Data/Data.RData")
library("glasso") # need install
source("function.R")
pvalue_adjust_idx <- sort(pvalue.adjust, index.return = T)$ix
sig_l_s <- data.frame("gene symbol" = gene.list[pvalue_adjust_idx],
"adjusted pvalue" = pvalue.adjust[pvalue_adjust_idx],
stringsAsFactors = F)
rm(gene.list) # delete useless variable
write.table(sig_l_s$gene.symbol, file = "Data/sig_gene.txt", quote = F, row.names = F,
col.names = F)
w_list <- read.table("Data/sig_string.txt", header = TRUE, sep = "\t", stringsAsFactors = F)
W <- matrix(0, nrow(sig_l_s), nrow(sig_l_s))
for (k in 1:nrow(w_list)) {
i <- match(w_list[k,]$node1, sig_l_s$gene.symbol)
j <- match(w_list[k,]$node2, sig_l_s$gene.symbol)
W[i,j] <- w_list[k,]$combined_score
W[j,i] <- W[i,j]
}
sum(W!=0) # test how many entries have non-zero value, 238 in this list
rm(i, j, k, w_list)
data <- group(pvalue_adjust_idx, X, c, y)
rm(X, y, c)
data_low <- scale(t(data$low.risk.group))
data_high <- scale(t(data$high.risk.group))
cov_low <- var(data_low)
cov_high <- var(data_high)
rm(data)
set.seed(1)
n_fold <- 10 # number of folds
rho = exp(seq(log(0.4), log(0.01), length.out = 20))
Ones <- matrix(rep(1, ncol(data_low)), nrow = ncol(data_low), ncol = ncol(data_low))
error <- choose_rho(data_low, n_fold, rho)
rho[error$log.cv == min(error$log.cv)] # rho based on minimum rule
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
rho_opt <- 0.184
pre_low <- glasso(cov_low, rho = as.matrix(rho_opt * (Ones - W)))
rm(n_fold, rho, rho_opt, Ones, error)
thres <- 1e-3
pre_low_binary <- pre_low$wi
pre_low_binary[abs(pre_low$wi) < thres] = 0
pre_low_binary[abs(pre_low$wi) > thres] = 1
diag(pre_low_binary) = 0
sum(pre_low_binary != 0) # how many connections in network, 768
rm(thres)
n_fold <- 10 # number of folds
rho = exp(seq(log(0.4), log(0.01), length.out = 20))
Ones <- matrix(rep(1, ncol(data_low)), nrow = ncol(data_low), ncol = ncol(data_low))
error <- choose_rho(data_high, n_fold, rho)
rho[error$log.cv == min(error$log.cv)] # rho based on minimum rule
abline(v = rho[error$log.cv == min(error$log.cv)], col = "red", lty = 3)
abline(h = min(error$log.cv) + error$log.rho[error$log.cv == min(error$log.cv)], col = "blue")
rho
rho_opt <- 0.223
pre_high <- glasso(cov_high, rho = as.matrix(rho_opt * (Ones - W)))
rm(n_fold, rho, rho_opt, Ones, error)
thres <- 1e-3
pre_high_binary <- pre_high$wi
pre_high_binary[abs(pre_high$wi) < thres] = 0
pre_high_binary[abs(pre_high$wi) > thres] = 1
diag(pre_high_binary) = 0
sum(pre_high_binary != 0) # how many connections in network, 760
rm(thres)
degree_low <- rowSums(pre_low_binary)
degree_high <- rowSums(pre_high_binary)
degree_low_s <- (degree_low - min(degree_low)) / (max(degree_low) - min(degree_low))
degree_high_s <- (degree_high - min(degree_high)) / (max(degree_high) - min(degree_high))
dns <- abs(degree_low_s - degree_high_s)
degree_diff_idx <- sort(dns, decreasing = T, index.return=T)$ix
sig_l_s$gene.symbol[degree_diff_idx[1:10]] # top 10 genes based on dwgLASSO
sig_l_s$adjusted.pvalue[degree_diff_idx[1:10]] # their adjusted p-values
